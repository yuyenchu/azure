<!-- views/pages/index_socket.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
	<%- include('../partials/head') %>
</head>

<body>
	<header>
    <%- include('../partials/header') %>
  	</header>
	<div class="container-fluid content mb-3">
		<h3 style="text-align:center">
			<a data-toggle="collapse" href="#controlall" class="text-dark nav-link">
				<b>Registered Devices</b>
			</a>
		</h3>
		<div id="controlall" class="collapse">
			<hr class="double-line">
			<p style="text-align:center">Direct Method to All Devices</p>
			<div class="mt-3 d-flex justify-content-center">
				<input type="text" class="form-control" placeholder="Method Name" id="methodall" style="max-width: 200px">
			</div>
			<div class="mt-3 d-flex justify-content-center">
				<textarea class="form-control" id="txtarea" rows="5" style="margin-top: 0px; margin-bottom: 0px;" placeholder="Payload"></textarea>
			</div>
			<div class="mt-3 d-flex justify-content-center">
				<button type="button" id="dmbuttonall" class="btn btn-danger" onclick="invokeall()">submit</button>
			</div>
			<label id="resultall" class="mt-4 ml-3"></label>
			<hr class="double-line">
			<p style="text-align:center">Twin Patch to All Devices</p>
			<textarea class="form-control mb-3" id="txtarea" rows="5" style="margin-top: 0px; margin-bottom: 0px;" placeholder="desired: {}"></textarea>
			<div class="mb-3 d-flex justify-content-center">
				<button type="button" id="tpbuttonall" class="btn btn-danger" onclick="invokeall()">submit</button>
			</div>
		</div>
		<br>
		<hr>
		<div id="messages"></div>
		<div id="devices"></div>

		<div id="carousel" class="carousel slide p-5 border" data-interval="false">
			<ol id="indicator" class="carousel-indicators bg-dark">
			</ol>
			<div id="inner" class="carousel-inner">
			</div>
			<a class="carousel-control-prev mr-5" href="#carousel" role="button" data-slide="prev">
				<span class="carousel-control-prev-icon mr-5 bg-dark rounded" aria-hidden="true"></span>
				<span class="sr-only mr-5">Previous</span>
			</a>
			<a class="carousel-control-next ml-5" href="#carousel" role="button" data-slide="next">
				<span class="carousel-control-next-icon ml-5 bg-dark rounded" aria-hidden="true"></span>
				<span class="sr-only ml-5">Next</span>
			</a>
		</div>
		<div id="modalHolder"></div>
	</div>
	<script src="helper.js"></script>
	<script>
		const MAX_PTS = 31;
		const COLORS = ["rgb(255, 159, 0)","rgb(0, 59, 174)","rgb(75, 192, 192)",
										"rgb(254, 27, 28)","rgb(254, 255, 51)","rgb(178, 102, 255)",
										"rgb(128, 255, 0)","rgb(102, 178, 255)","rgb(255, 102, 255)"]
		const buttonSpinner = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
		const chartTemplate = {	type: 'line',
								data: {	"labels": [],
										"datasets":[]},
								options: {
									aspectRatio: 1,
									scales: {
										yAxes : [{
											ticks : {
												max : 100,    
												min : 0,
											}
										}],
										xAxes : [{
												type: "time",
											time: {
												displayFormats: {
													millisecond: "h:mm:ss a",
													second: "h:mm:ss a"
												}
											},
											ticks : {
												callback: function(tick, index, array) {
														return (index % 3) ? "" : tick;
												}
											}
										}]
									},
									title: {
										display: true
									}
								}
							}
		var devices = <%- JSON.stringify(devices) %>;
        var twins = <%- JSON.stringify(twins) %>;
        var msgGroup = {};
		var charts = {};
		var smCharts = {};

		function invokeall() {
			$("#resultall").html("");
			$("#dmbuttonall").html(buttonSpinner);
			var methodname = $("#methodall").val().trim();
			var payload = $("#payloadall").val().trim();
			Object.keys(devices).forEach(ele => {
				$.ajax({
                url: "/method/"+ele+"/"+methodname,
                type: 'POST',
                data: JSON.parse(payload),
				success: function (data, textStatus, request) {
					// console.log("data type: "+typeof(data));
					console.log("data: "+data);
					if (data.status == 200) {
						$("#resultall").append('<label style="color:green">&#10003;'+data.payload.Response+'</label>');
					} else {
						$("#resultall").append('<label style="color:red">&#10007;'+data.payload.Response+'</label>');
					}
					$("#dmbuttonall").html("submit");
				}
				}).fail(function (jqXHR, textStatus, errorThrown) { 
					$("#resultall").append('<label style="color:red">&#10007;'+jqXHR.status+" "+jqXHR.statusText+'</label>');
					$("#dmbuttonall").html("submit");
				});
			})
		}

		// http requests for invoke direct method
		function invoke(id) {
			$("#r"+id).val("");
			$("#dmb"+id).html(buttonSpinner);
			var methodname = $("#m"+id).val().trim();
            var payload = $("#p"+id).val().trim();
            $.ajax({
                url: "/method/"+id+"/"+methodname,
                type: 'POST',
                data: JSON.parse(payload),
                success: function (data, textStatus, request) {
                    // console.log("data type: "+typeof(data));
                    console.log("data: "+data);
                    $("#r"+id).val(JSON.stringify(data));
                    $("#dmb"+id).html("submit");
                }
            }).fail(function (jqXHR, textStatus, errorThrown) { 
                $("#r"+id).val(jqXHR.status+" "+jqXHR.statusText);
                $("#dmb"+id).html("submit");
            });
		}

		// http requests for update desired device name in twin
		function updateTwin(id) {
			var newname = $("#mT"+id).text().trim();
			$("#mT"+id).text(newname);
			if (displayName(twins[id]["device"], id) != newname) {
				$.ajax({
					url: "/twin/"+id+"/"+newname,
					success: function (data, textStatus, request) {
						if (request.status == 200) {
							$("#tr"+id).css('color', 'green');
							$("#tr"+id).html("&#10003; Device name updated");
						} else {
							$("#tr"+id).css('color', 'red');
							$("#tr"+id).html("&#10007; Unable to update "+request.status);
						}
					}
				}).fail(function (jqXHR, textStatus, errorThrown) { 
					$("#tr"+id).css('color', 'red');
					$("#tr"+id).html("&#10007; "+jqXHR.status+" "+jqXHR.statusText);
				});
				setTimeout(()=>{ $("#tr"+id).html(""); }, 5000);
			}
		}

		// initialize html elements
		function items(data){
			var count = 0;
			Object.keys(data).forEach(element =>{
				console.log(count);
				if (document.getElementById(element+"label") == undefined){
					// device name and conn status
					$("#devices").append('<div class="p-3 mb-2 bg-light"><p class="mt-3 d-inline-block" '+
										'id="'+element+'name"></p>'+
										'<span class="m-2" id = "'+element+
										'label"></span></div>');
					// insert carousel indicator
					$("#indicator").append(	'<li data-target="#carousel" data-slide-to="0"'+
											(count==0?'class="active"':' ')+'></li>');
					// insert carousel items (chart)
					$("#inner").append(	'<div class="carousel-item'+(count==0?' active"':' ')+
										'"><canvas id="chart'+element+'" width="400" height="400"></canvas></div>')
					// insert modals
					$("#modalHolder").append(
					`<div id="modal`+element+`" class="modal fade bd-example-modal-lg show" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-modal="true">
						<div class="modal-dialog modal-xl modal-dialog-centered" role="document">
							<div class="modal-content">
								<div class="modal-header">
									<h5 class="modal-title" id="mT`+element+`">Device Name: `+displayName(twins[element]["device"], element)+`</h5>
									<label class="d-inline ml-4" id="tr`+element+`" style="font-size: 6px;"></label>
									<button type="button" class="close" data-dismiss="modal" aria-label="Close">
										<span aria-hidden="true">Ã—</span>
									</button>
								</div>
								<div class="modal-body">
									<div class="container">
										<div class="row">
											<div class="col">
												<div class="row chart-container">
													Monitor
													<canvas id="smchart`+element+`" class="m-1" style="max-height: 300px""></canvas>     
												</div>
												<div class="row">Telemetry
													<textarea readonly class="form-control" id="tele`+element+`" rows="5" style="margin-top: 0px; margin-bottom: 0px; max-height: 250px; min-height: 40px;" placeholder="result: {}"></textarea>
												</div>
											</div>
											<div class="col-8">
												<div class="row overflow-auto" style="height: 300px;">
													<div id="t`+element+`" class="mt-3 ml-3"></div>
												</div><hr>
												<div class="row mb-2">
													<div class="col form-check form-check-inline justify-content-end">
														<input type="checkbox" data-toggle="toggle" id="check`+element+`" data-size="xs">
														<label class="ml-2 form-check-label">Text Mode</label>
													</div>
												</div>
												<div class="row overflow-auto" style="min-height: 250px;" id="gctl`+element+`">
													<div class="col" id="msg`+element+`">
													</div>
												</div>
												<div class="row overflow-auto" style="height: 250px; display: none;" id="tctl`+element+`">
													<div class="form-group col">
														<label for="input">Method Name</label>
														<input class="form-control" id="m`+element+`" placeholder="Reboot">
														<label for="textarea">Payload</label>
														<textarea class="form-control" id="p`+element+`" placeholder="Payload" rows="5" style="max-height: 200px; min-height: 40px;"></textarea>
														<button type="button" id="dmb`+element+`" class="btn btn-primary mt-3" onclick="invoke('`+element+`')">submit</button>
														<button type="button" id="clr`+element+`" class="btn btn-primary mt-3 ml-3">clear</button>
													</div>
													<textarea readonly="" class="form-control mr-2 ml-2" id="r`+element+`" rows="2" style="margin-top: 0px; margin-bottom: 0px; max-height: 150px; min-height: 40px;" placeholder="result: {}"></textarea>
												</div>
											</div>
										</div>
									</div>
								</div>
								<div class="modal-footer">
									<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
								</div>
							</div>
						</div>
					</div>`);
					$("#clr"+element).click(function() {
						$("#m"+element).val("");
						$("#p"+element).val("");
					});
					$("#mT"+element).click(function() {
						$("#mT"+element).prop('contenteditable', true);
					});
					$("#mT"+element).blur(function() {
						$("#mT"+element).prop('contenteditable', false);
						updateTwin(this.id.substring(2,this.id.length));
					});
					$("#check"+element).change(function() {
						if($("#check"+element).prop("checked")) {
							$("#gctl"+element).hide();
							$("#tctl"+element).fadeIn('slow');
						} else {
							$("#tctl"+element).hide();
							$("#gctl"+element).fadeIn('slow');
						}
                    });
                    if (twins[element]["module"] && twins[element]["module"]["thingspro-agent"]) {
                        getMsgGroup(element);
                    }
					// labeling charts
					charts[element] = new Chart($('#chart'+element), JSON.parse(JSON.stringify(chartTemplate)));
					smCharts[element] = new Chart($('#smchart'+element), JSON.parse(JSON.stringify(chartTemplate)));
					charts[element].options.title.text = displayName(twins[element]["device"], element);
					count++;
				}
				drawState(data[element], element);
				// space for twin info
				if (document.getElementById(element) == undefined){
					$("#devices").append('<button type="button" class="btn btn-info" data-toggle="collapse" data-target="#ft'+element+'">Full Twin</button>');
					$("#devices").append('<button type="button" class="btn btn-info d-inline ml-3" data-toggle="modal" data-target="#modal'+element+'">Control Panel</button>');
					$("#devices").append('<div id=ft'+element+' class="canvas collapse"></div><hr>');
				} 
			});
        }
        
        function getMsgGroup(id) {
            $.ajax({
                url: "/method/"+id+"/message-policy-get",
                type: 'POST',
                data: {},
                success: function (data, textStatus, request) {
                    // console.log("data type: "+typeof(data));
                    console.log("data: "+JSON.stringify(data));
                    if (data.status && data.status == 200) {
                        msgGroup[id] = data.payload.data.groups;
                        data.payload.data.groups.forEach(element => {
                            if ($("#msg"+id+" > .row").length == 0 ||
                                $("#msg"+id+" > .row:last-child").children().length>=3) {
                                $("#msg"+id).append('<div class="row mb-2 container-fluid"></div>');
                            } 
                            $("#msg"+id+" > .row:last-child").append(`<div class="col m-1"><input type="checkbox" 
                                                                        `+(element.enable?"checked":"")+` data-toggle="toggle" id="`+element["outputTopic"]+`" data-style="ios">
                                                                        <label class="ml-1 form-check-label">`+element["outputTopic"]+`</label>
                                                                    </div>`);
                            $("#"+element["outputTopic"]).change(function(){
                                switchMsgGroup(id, element["outputTopic"], $(this).prop('checked'))
                            });
                        });
                    }
                }
            }).fail(function (jqXHR, textStatus, errorThrown) { 
                console.log("Msg Group Error: ("+id+") "+jqXHR.status+" "+jqXHR.statusText);
            });
        }

        function switchMsgGroup(id, topic, checked) {
            msgGroup[id].forEach(element => {
                if (element["outputTopic"] == topic) {
                    element["enable"] = checked;
                }
            });
            console.log("msgput\n" + JSON.stringify(msgGroup[id]));
            $.ajax({
                url: "/method/"+id+"/message-policy-put",
                type: 'POST',
                dataType: 'json',
                contentType: 'application/json',
                data: JSON.stringify({"groups": msgGroup[id]}),
                success: function (data, textStatus, request) {
                    // console.log("data type: "+typeof(data));
                    console.log("data: "+JSON.stringify(data));
                }
            }).fail(function (jqXHR, textStatus, errorThrown) { 
                console.log("Msg Group Error: ("+id+") "+jqXHR.status+" "+jqXHR.statusText);
            });
        }

		// unwrapping twin data
		function unwrapTwin(data, indent) {
			if (data== null || ['string', 'number', 'boolean'].indexOf(typeof(data)) >= 0){
				return data == null ? "null" : data;
			} else {
				var str = "";
				Object.keys(data).forEach(element => {
					var ele = typeof(element)=="string" ? element.replace("$","") : element;
					if (ele != "metadata") {
						str += "</p><p style=\"text-indent:"+(indent*20)+"px;margin-top:-15px;\">"+
									ele+": "+unwrapTwin(data[element], indent+1)+"</p>";
					}
				});
				return str;
			}
		}
					
		// insert data to chart
		function insertData(chart, lb, dat, time) {
			var found = false;
			for (const [index, element] of chart.data.datasets.entries()) {
				// console.log(element.label);
				// console.log(lb)
				if (element.label == lb){
					var found = true;
					if(time > element.data[element.data.length - 1].x) {
						element.data.push({x: moment(time), y:Number(dat)});
						if(element.data.length > MAX_PTS){
							element.data.shift();
						}
						break;
					}
				}
			}
			if (!found) {
				chart.data.datasets.push({
					"label":lb,
					"data":[{x: moment(time), y:Number(dat)}],
					"fill":false,
					"borderColor":COLORS[chart.data.datasets.length%COLORS.length],
					"lineTension":0.1
				});
			}
		}

		function unwrapTele (data, preKey, chart, eqtime) {
			Object.keys(data).forEach(element => {
				if (element == "values" && Array.isArray(data[element])) {
					data[element].forEach(value => {
						insertData(chart, preKey, value["value"], moment(value["updateTimeStamp"]));
					});
				} else if (Number(data[element])) {
					insertData(chart, element, Number(data[element]), moment(eqtime));
				} else if (isDict(data)) {			
					unwrapTele(data[element], element, chart, eqtime);
				}
			});
		}

		// draw a individual chrat based on id
		// only update if timestamp is newer
		// title = device id
		// time = full time stamp
		// msg = data to plot
		function drawChart(msg, title, time){
			var chart = charts[title];
			var smChart = smCharts[title];
			console.log(moment(time)+" "+title);
			Object.keys(msg).forEach(element => {
				if (isDict(msg[element])) {
					unwrapTele(msg[element], element, chart, time);
					unwrapTele(msg[element], element, smChart, time);
				} else if (Number(msg[element])) {
					insertData(chart, element, Number(msg[element]), moment(time));
					insertData(smChart, element, Number(msg[element]), moment(time));
				}
			});
			chart.update();
			smChart.update();
		}

		// draw connection state badge
		function drawState(data, id) {
			// connstatus badge color and text
			devices[id] = data;
			if(data["state"] == "Disconnected"){
					$("#"+id+"label").removeClass("badge badge-success");
					$("#"+id+"label").addClass("badge badge-danger");
					$("#"+id+"label").text("Disconnected at "+
						data["lastActive"].split(".")[0].replace("T", " "));
				} else {
					$("#"+id+"label").removeClass("badge badge-danger");
					$("#"+id+"label").addClass("badge badge-success");
					$("#"+id+"label").text(data["state"]);
				}
		}

		// draw twin info block
		function drawTwin(id){
            twin = twins[id];
			var str ='';
			Object.keys(twin["device"]).forEach(element =>{
				// console.log(element)
				str += "<p style=\"margin-top:-15px;\">"+element+": "+unwrapTwin(twin["device"][element], 1);
			});
            $("#ft"+id).html(str);
            if (twin["module"]) {
                str ='';
                Object.keys(twin["module"]).forEach(element =>{
                    // console.log(element)
                    str += "<p style=\"margin-top:-15px;\">"+element+": "+unwrapTwin(twin["module"][element], 1);
                });
            }
			$("#t"+id).html(str);
			$("#"+id+"name").text(displayName(twins[id]["device"], id));
			charts[id].options.title.text = displayName(twins[id]["device"], id);
			charts[id].update();
		}

		function drawMsgCtl(id) {
			if ($("#gctl"+id+" > .col > .row:last-child .col").length > 3){
				$("#gctl"+id+" > .col > .row:last-child").append('<div class="col">');
			} else {
				$("#gctl"+id+" > .col").append('<div class="row">');
			}
			
		}

		// initialization
		items(devices);
		Object.keys(twins).forEach(id =>{
			drawTwin(id);
		});
		$('.carousel').carousel();

		// listen to web socket
		var socket = io();
		socket.on($("#username").text(), function(msg){
			console.log(JSON.stringify(msg));
			type = Object.keys(msg)[0];
			data = msg[type];
			switch (type) {
				case 'state':
					console.log("receive device");
					drawState(data.body, data.id);
					break;
				case 'twin':
                    console.log("receive twin");
                    twins[data.id] = data.body;
					drawTwin(data.id);
					break;
				case 'event':
					console.log("receive telemtry");
					drawChart(data.body["body"], data.id, data.body["time"]);
					$("#tele"+data.id).val(JSON.stringify(data.body["body"]));
					break;
			}
		});
	</script>
</body>
</html>
