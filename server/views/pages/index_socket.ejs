<!-- views/pages/index_socket.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
	<%- include('../partials/head') %>
</head>

<body>
	<header>
    <%- include('../partials/header') %>
  	</header>
	<div class="container-fluid content mb-3">
		<h3 style="text-align:center">
			<a data-toggle="collapse" href="#controlall" class="text-dark nav-link">
				<b>Registered Devices</b>
			</a>
		</h3>
		<div id="controlall" class="collapse">
			<hr class="double-line">
			<p style="text-align:center">Direct Method to All Devices</p>
			<div class="input-group mb-3 mt-3 d-flex justify-content-center">
				<input type="text" class="form-control" placeholder="Method Name" id="methodall" style="max-width: 200px">
				<input type="text" class="form-control" placeholder="Payload" id="payloadall" style="max-width: 200px">
			</div>
			<div class="mb-3 d-flex justify-content-center">
				<button type="button" id="dmbuttonall" class="btn btn-danger" onclick="invokeall()">submit</button>
			</div>
			<label id="resultall" class="mt-1 ml-3"></label>
			<hr class="double-line">
			<p style="text-align:center">Twin Patch to All Devices</p>
			<div class="form-group">
				<textarea class="form-control" id="txtarea" rows="5" style="margin-top: 0px; margin-bottom: 0px;" placeholder="desired: {}"></textarea>
			</div>
			<div class="mb-3 d-flex justify-content-center">
				<button type="button" id="tpbuttonall" class="btn btn-danger" onclick="invokeall()">submit</button>
			</div>
		</div>
		<br>
		<hr>
		<div id="messages"></div>
		<div id="devices"></div>

		<div id="carousel" class="carousel slide p-5 border" data-interval="false">
			<ol id="indicator" class="carousel-indicators bg-dark">
			</ol>
			<div id="inner" class="carousel-inner">
			</div>
			<a class="carousel-control-prev mr-5" href="#carousel" role="button" data-slide="prev">
				<span class="carousel-control-prev-icon mr-5 bg-dark rounded" aria-hidden="true"></span>
				<span class="sr-only mr-5">Previous</span>
			</a>
			<a class="carousel-control-next ml-5" href="#carousel" role="button" data-slide="next">
				<span class="carousel-control-next-icon ml-5 bg-dark rounded" aria-hidden="true"></span>
				<span class="sr-only ml-5">Next</span>
			</a>
		</div>
		<div id="modalHolder"></div>
	</div>
	<script src="helper.js"></script>
	<script>
		const MAX_PTS = 31;
		const COLORS = ["rgb(255, 159, 0)","rgb(0, 59, 174)","rgb(75, 192, 192)",
										"rgb(254, 27, 28)","rgb(254, 255, 51)","rgb(178, 102, 255)",
										"rgb(128, 255, 0)","rgb(102, 178, 255)","rgb(255, 102, 255)"]
		const buttonSpinner = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
		var devices = <%- JSON.stringify(devices) %>;
		var twins = <%- JSON.stringify(twins) %>;
		var charts = {};

		function invokeall() {
			$("#resultall").html("");
			$("#dmbuttonall").html(buttonSpinner);
			var methodname = $("#methodall").val().trim();
			var payload = $("#payloadall").val().trim();
			Object.keys(devices).forEach(ele => {
				$.ajax({
				url: "/method/"+ele+"/"+methodname+"/"+payload,
				success: function (data, textStatus, request) {
					// console.log("data type: "+typeof(data));
					console.log("data: "+data);
					if (data.status == 200) {
						$("#resultall").append('<label style="color:green">&#10003;'+data.payload.Response+'</label>');
					} else {
						$("#resultall").append('<label style="color:red">&#10007;'+data.payload.Response+'</label>');
					}
					$("#dmbuttonall").html("submit");
				}
				}).fail(function (jqXHR, textStatus, errorThrown) { 
					$("#resultall").append('<label style="color:red">&#10007;'+jqXHR.status+" "+jqXHR.statusText+'</label>');
					$("#dmbuttonall").html("submit");
				});
			})
		}

		// http requests for invoke direct method
		function invoke(id) {
			$("#r"+id).html("");
			$("#dmb"+id).html(buttonSpinner);
			var methodname = $("#m"+id).val().trim();
			var payload = $("#p"+id).val().trim();
			$.ajax({
				url: "/method/"+id+"/"+methodname+"/"+payload,
				success: function (data, textStatus, request) {
					// console.log("data type: "+typeof(data));
					console.log("data: "+data);
					if (data.status == 200) {
						$("#r"+id).val(data);
					} else {
						$("#r"+id).val(data);
					}
					$("#dmb"+id).html("submit");
				}
			}).fail(function (jqXHR, textStatus, errorThrown) { 
				$("#r"+id).val(jqXHR.status+" "+jqXHR.statusText);
				$("#dmb"+id).html("submit");
			});
		}

		// http requests for update desired device name in twin
		function updateTwin(id) {
			$("#r2"+id).html("");
			$("#tpb"+id).html(buttonSpinner);
			var newname = $("#n"+id).val().trim();
			$.ajax({
				url: "/twin/"+id+"/"+newname,
				success: function (data, textStatus, request) {
					if (request.status == 200) {
						$("#r2"+id).css('color', 'green');
						$("#r2"+id).html("&#10003; Twin updated");
					} else {
						$("#r2"+id).css('color', 'red');
						$("#r2"+id).html("&#10007; Unable to update "+request.status);
					}
					$("#tpb"+id).html("submit");
				}
			}).fail(function (jqXHR, textStatus, errorThrown) { 
				$("#r2"+id).css('color', 'red');
				$("#r2"+id).html("&#10007; "+jqXHR.status+" "+jqXHR.statusText);
				$("#tpb"+id).html("submit");
			});
		}

		function updateTwin(id) {
			var newname = $("#mT"+element).text().trim();
			$("#mT"+element).text(newname);
			$.ajax({
				url: "/twin/"+id+"/"+newname,
				success: function (data, textStatus, request) {
					if (request.status == 200) {
						$("#r2"+id).css('color', 'green');
						$("#r2"+id).html("&#10003; Device name updated");
					} else {
						$("#r2"+id).css('color', 'red');
						$("#r2"+id).html("&#10007; Unable to update "+request.status);
					}
					$("#tpb"+id).html("submit");
				}
			}).fail(function (jqXHR, textStatus, errorThrown) { 
				$("#r2"+id).css('color', 'red');
				$("#r2"+id).html("&#10007; "+jqXHR.status+" "+jqXHR.statusText);
				$("#tpb"+id).html("submit");
			});
		}

		// initialize html elements
		function items(data){
			var count = 0;
			Object.keys(data).forEach(element =>{
				console.log(count);
				if (document.getElementById(element+"label") == undefined){
					// device name and conn status
					$("#devices").append('<div class="p-3 mb-2 bg-light"><p class="mt-3 d-inline-block" '+
										'id="'+element+'name"></p>'+
										'<span class="m-2" id = "'+element+
										'label"></span></div>');
					// // input group for invoke direcjt method
					// $("#devices").append('<div class="input-group mb-3 mt-3"><input type="text" class='+
					// 					'"form-control" placeholder="Method Name" id="m'+
					// 					element+'" style="max-width: 200px">'+
					// 					'<input type="text" class="form-control" placeholder="Payload" id="p'+
					// 					element+'" style="max-width: 175px">'+
					// 					'<button type="button" id="dmb'+element+'"class="btn btn-primary ml-3" onclick="invoke(\''+
					// 					element+'\')">submit</button>'+
					// 					'<label id="r'+element+'" class="mt-1 ml-3"></label></div>'+
					// 					'<div class="input-group mb-3 mt-3"><input type="text" class='+
					// 					'"form-control" placeholder="New Device Name" id="n'+
					// 					element+'" style="max-width: 200px">'+
					// 					'<button type="button" id="tpb'+element+'"class="btn btn-primary ml-3" onclick="updateTwin(\''+
					// 					element+'\')">submit</button>'+
					// 						'<label id="r2'+element+'" class="mt-1 ml-3"></label></div>');
					// insert carousel indicator
					$("#indicator").append(	'<li data-target="#carousel" data-slide-to="0"'+
																	(count==0?'class="active"':' ')+'></li>');
					// carousel items (chart)
					$("#inner").append(	'<div class="carousel-item'+(count==0?' active"':' ')+
															'"><canvas id="chart'+element+'" width="400" height="400"></canvas></div>')
					// labeling charts
					charts[element] = new Chart(document.getElementById('chart'+element).getContext('2d'), {
						type: 'line',
						data: {	"labels": [],
								"datasets":[]},
						options: {
									scales: {
											yAxes : [{
													ticks : {
															max : 100,    
															min : 0,
													}
											}],
											xAxes : [{
													type: "time",
													time: {
														displayFormats: {
															millisecond: "h:mm:ss a",
															second: "h:mm:ss a"
														}
													},
													ticks : {
														callback: function(tick, index, array) {
																return (index % 3) ? "" : tick;
														}
													}
											}]
									},
									title: {
											display: true,
											text: displayName(twins[element], element)
									}
							}
					});
					count++;

					$("#modalHolder").append(`<div id="modal`+element+`" class="modal fade bd-example-modal-lg show" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-modal="true">
						<div class="modal-dialog modal-xl modal-dialog-centered" role="document">
							<div class="modal-content">
								<div class="modal-header">
								<h5 class="modal-title" id="mT`+element+`">`+displayName(twins[element], element)+`</h5>
								<button type="button" class="close" data-dismiss="modal" aria-label="Close">
									<span aria-hidden="true">Ã—</span>
								</button></div>
								<div class="modal-body overflow-auto">
									<div class="container">
										<div class="row">
											<div class="col">
												<div class="row">
													<canvas id="chart2`+element+`" class="p-1" style="max-height: 300px;"></canvas>     
												</div>
												<div class="row overflow-auto">Telemetry
													<textarea readonly class="form-control" id="tele`+element+`" rows="5" style="margin-top: 0px; margin-bottom: 0px; max-height: 250px; min-height: 40px;" placeholder="result: {}"></textarea>
												</div></div>
											<div class="col-8">
												<div class="row overflow-auto" style="height: 300px;">
													twin
												</div><hr>
												<div class="row overflow-auto" style="height: 250px;">
													<div class="form-group col">
														<label for="input">Method Name</label>
														<input class="form-control" id="m`+element+`" placeholder="Reboot">
														<label for="textarea">Payload</label>
														<textarea class="form-control" id="p`+element+`" rows="5" style="max-height: 200px; min-height: 40px;"></textarea>
														<button type="button" id="dmb`+element+`" class="btn btn-primary mt-3" onclick="invoke(`+element+`)">submit</button>
														<button type="button" class="btn btn-primary mt-3 ml-3">clear</button>
													</div>
													<textarea readonly="" class="form-control mr-2 ml-2" id="r`+element+`" rows="2" style="margin-top: 0px; margin-bottom: 0px; max-height: 150px;" placeholder="result: {}"></textarea>
												</div></div></div></div></div>
								<div class="modal-footer">
								<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
								</div></div></div></div>`);
				("#mT"+element).dblclick(function() {
					$("#modalTitle").prop('contenteditable', true);
				});
				$("#mT"+element).blur(function() {
					$("#modalTitle").prop('contenteditable', false);
					updateTwin(id);
				});
				}
				drawState(data[element], element);
				// space for twin info
				if (document.getElementById(element) == undefined){
					$("#devices").append('<button type="button" class="btn btn-info" data-toggle="collapse" data-target="#'+element+'">Full Twin</button>');
					$("#devices").append('<button type="button" class="btn btn-info d-inline ml-3" data-toggle="modal" data-target="#modal'+element+'">Control Panel</button>');
					$("#devices").append('<div id='+element+' class="canvas collapse"></div><hr>');
				} 
			});
		}

		// unwrapping twin data
		function unwrapData(data, indent) {
			if (data== null || ['string', 'number', 'boolean'].indexOf(typeof(data)) >= 0){
				return data == null ? "null" : data;
			} else {
				var str = "";
				Object.keys(data).forEach(element => {
					var ele = typeof(element)=="string" ? element.replace("$","") : element;
					if (ele != "metadata") {
						str += "</p><p style=\"text-indent:"+(indent*20)+"px;margin-top:-15px;\">"+
									ele+": "+unwrapData(data[element], indent+1)+"</p>";
					}
				});
				return str;
			}
		}
					
		// insert data to chart
		function insertData(chart, lb, dat, time) {
			var found = false;
			for (const [index, element] of chart.data.datasets.entries()) {
				// console.log(element.label);
				// console.log(lb)
				if (element.label == lb){
					var found = true;
					if(time > element.data[element.data.length - 1].x) {
						element.data.push({x: moment(time), y:Number(dat)});
						if(element.data.length > MAX_PTS){
							element.data.shift();
						}
						break;
					}
				}
			}
			if (!found) {
				chart.data.datasets.push({
					"label":lb,
					"data":[{x: moment(time), y:Number(dat)}],
					"fill":false,
					"borderColor":COLORS[chart.data.datasets.length%COLORS.length],
					"lineTension":0.1
				});
			}
		}

		// draw a individual chrat based on id
		// only update if timestamp is newer
		// title = device id
		// time = full time stamp
		// msg = data to plot
		function drawChart(msg, title, time){
			var chart = charts[title];
			console.log(moment(time)+" "+title);
			Object.keys(msg).forEach(element => {
				insertData(chart, element, JSON.parse(msg[element]), moment(time));
			});
			// chart.update({
			// 		duration: 800,
			// 		easing: 'easeOutBounce'
			// });
			chart.update();
		}

		// draw connection state badge
		function drawState(data, id) {
			// connstatus badge color and text
			devices[id] = data;
			if(data["state"] == "Disconnected"){
					$("#"+id+"label").removeClass("badge badge-success");
					$("#"+id+"label").addClass("badge badge-danger");
					$("#"+id+"label").text("Disconnected at "+
						data["lastActive"].split(".")[0].replace("T", " "));
				} else {
					$("#"+id+"label").removeClass("badge badge-danger");
					$("#"+id+"label").addClass("badge badge-success");
					$("#"+id+"label").text(data["state"]);
				}
		}

		// draw twin info block
		function drawTwin(twin, id){
			twins[id] = twin;
			var str ='';
			Object.keys(twin).forEach(element =>{
				// console.log(element)
				str += "<p style=\"margin-top:-15px;\">"+element+": "+unwrapData(twin[element], 1);
			});
			$("#"+id).html(str);
			try {
				$("#"+id+"name").text(displayName(twin, id));
				charts[id].options.title.text = displayName(twin, id);
				charts[id].update();
			} catch(err) {
				console.log(err)
			}
		}

		// initialization
		items(devices);
		Object.keys(twins).forEach(id =>{
			drawTwin(twins[id], id)
		});
		$('.carousel').carousel();

		// listen to web socket
		var socket = io();
		Object.keys(devices).forEach(id =>{
			socket.on(id+"/device", function(data){
				console.log("receive device");
				drawState(data, id)
			});
		
			socket.on(id+"/twin", function(data){
				console.log("receive twin");
				drawTwin(data, id);
			});

			socket.on(id+"/telemtry", function(data){
				console.log("receive telemtry");
				drawChart(data["body"], id, data["time"]);
				$("#tele"+id).val(JSON.stringify(data.body));
			});
		});
	</script>
</body>
</html>
