<!-- views/pages/index.ejs -->

<!DOCTYPE html>
<html lang="en">
<head>
	<%- include('../partials/head') %>
</head>

<body>
	<header>
    <%- include('../partials/header') %>
  </header>
	<div class="container-fluid content mb-3">
		<h3 style="text-align:center"><b>Registered Devices</b></h3>
		<br>
		<hr>
		<ul id="messages"></ul>
		<div id="devices"></div>

		<div id="carousel" class="carousel slide p-5 border" data-interval="false">
			<ol id="indicator" class="carousel-indicators bg-dark">
			</ol>
			<div id="inner" class="carousel-inner">
			</div>
			<a class="carousel-control-prev mr-5" href="#carousel" role="button" data-slide="prev">
				<span class="carousel-control-prev-icon mr-5 bg-dark rounded" aria-hidden="true"></span>
				<span class="sr-only mr-5">Previous</span>
			</a>
			<a class="carousel-control-next ml-5" href="#carousel" role="button" data-slide="next">
				<span class="carousel-control-next-icon ml-5 bg-dark rounded" aria-hidden="true"></span>
				<span class="sr-only ml-5">Next</span>
			</a>
		</div>

	</div>
	<script>
		const MAX_PTS = 31;
		const COLORS = ["rgb(255, 159, 0)","rgb(0, 59, 174)","rgb(75, 192, 192)",
										"rgb(254, 27, 28)","rgb(254, 255, 51)","rgb(178, 102, 255)",
										"rgb(128, 255, 0)","rgb(102, 178, 255)","rgb(255, 102, 255)"]
		const devices = <%- JSON.stringify(devices) %>;
		const twins = <%- JSON.stringify(twins) %>;
		var charts = {};
		
		function toggle(id) {
				var x = document.getElementById(id);
				if (x.style.display === "none") {
						x.style.display = "block";
				} else {
						x.style.display = "none";
				}
		}

		// http requests for invoke direct method
		function invoke(id) {
			$("#r"+id).html("");
			var methodname = $("#m"+id).val().trim();
			var payload = $("#p"+id).val().trim();
			$.ajax({
				url: "/method/"+id+"/"+methodname+"/"+payload,
				success: function (data, textStatus, request) {
					// console.log("data type: "+typeof(data));
					console.log("data: "+data);
					if (data.status == 200) {
						$("#r"+id).css('color', 'green');
						$("#r"+id).html("&#10003; "+data.payload.Response);
					} else {
						$("#r"+id).css('color', 'red');
						$("#r"+id).html("&#10007; "+data.status+data.payload.Response);
					}
					
				}
			}).fail(function (jqXHR, textStatus, errorThrown) { 
				$("#r"+id).css('color', 'red');
				$("#r"+id).html("&#10007; "+jqXHR.status+jqXHR.statusText);
			});
		}

		// http requests for update desired device name in twin
		function updateTwin(id) {
			$("#r2"+id).html("");
			var newname = $("#n"+id).val().trim();
			$.ajax({
				url: "/twin/"+id+"/"+newname,
				success: function (data, textStatus, request) {
					if (request.status == 200) {
						$("#r2"+id).css('color', 'green');
						$("#r2"+id).html("&#10003; Twin updated");
					} else {
						$("#r2"+id).css('color', 'red');
						$("#r2"+id).html("&#10007; Unable to update "+request.status);
					}
				}
			}).fail(function (jqXHR, textStatus, errorThrown) { 
				$("#r2"+id).css('color', 'red');
				$("#r2"+id).html("&#10007; "+jqXHR.status+jqXHR.statusText);
			});
		}

		// initialize html elements
		function items(data){
			var count = 0;
			Object.keys(data).forEach(element =>{
				console.log(count);
				if (document.getElementById(element+"label") == undefined){
					// device name and conn status
					$("#devices").append(	'<div class="p-3 mb-2 bg-light"><p class="mt-3 d-inline-block" '+
																'id="'+element+'name"></p>'+
																'<span class="m-2" id = "'+element+
																'label"></span></div>');
					// input group for invoke direcjt method
					$("#devices").append(	'<div class="input-group mb-3 mt-3"><input type="text" class='+
																'"form-control" placeholder="Method Name" id="m'+
																element+'" style="max-width: 200px">'+
																'<input type="text" class="form-control" placeholder="Payload" id="p'+
																element+'" style="max-width: 175px">'+
																'<button type="button" class="btn btn-primary ml-3" onclick="invoke(\''+
																element+'\')">submit</button>'+
																'<label id="r'+element+'" class="mt-1 ml-3"></label></div>'+
																'<div class="input-group mb-3 mt-3"><input type="text" class='+
																'"form-control" placeholder="New Device Name" id="n'+
																element+'" style="max-width: 200px">'+
																'<button type="button" class="btn btn-primary ml-3" onclick="updateTwin(\''+
																element+'\')">submit</button>'+
																'<label id="r2'+element+'" class="mt-1 ml-3"></label></div>');
					// insert carousel indicator
					$("#indicator").append(	'<li data-target="#carousel" data-slide-to="0"'+
																	(count==0?'class="active"':' ')+'></li>');
					// carousel items (chart)
					$("#inner").append(	'<div class="carousel-item'+(count==0?' active"':' ')+
															'"><canvas id="chart'+element+'" width="400" height="400"></canvas></div>')
					// labeling charts
					charts[element] = new Chart(document.getElementById('chart'+element).getContext('2d'), {
						type: 'line',
						data: {	"labels": [],
								"datasets":[]},
						options: {
									scales: {
											yAxes : [{
													ticks : {
															max : 100,    
															min : 0,
													}
											}],
											xAxes : [{
													type: "time",
													time: {
														displayFormats: {
															millisecond: "h:mm:ss a",
															second: "h:mm:ss a"
														}
													},
													ticks : {
														callback: function(tick, index, array) {
																return (index % 3) ? "" : tick;
														}
													}
											}]
									},
									title: {
											display: true,
											text: element
									}
							}
					});
					count++;
				}
				drawState(data[element], element);
				// space for twin info
				if (document.getElementById(element) == undefined){
					$("#devices").append('<div id='+element+' class="canvas" style="display: none"></div>');
					$("#devices").append('<button type="button" class="btn btn-info" onclick="toggle(\''+element+'\')">More Info</button><hr>');
				} 
			});
		}

		// unwrapping twin data
		function unwrapData(data, indent) {
			if (data== null || ['string', 'number', 'boolean'].indexOf(typeof(data)) >= 0){
				return data == null ? "null" : data;
			} else {
				var str = "";
				Object.keys(data).forEach(element => {
					var ele = typeof(element)=="string" ? element.replace("$","") : element;
					str += "</p><p style=\"text-indent:"+(indent*20)+"px;margin-top:-15px;\">"+
								ele+": "+unwrapData(data[element], indent+1)+"</p>";
				});
				return str;
			}
		}
					
		// insert data to chart
		function insertData(chart, lb, dat, time) {
			var found = false;
			for (const element of chart.data.datasets.entries()) {
				// console.log(element.label);
				// console.log(lb)
				if (element.label == lb){
					var found = true;
					if(time > element.data[element.data.length - 1].x) {
						element.data.push({x: moment(time), y:Number(dat)});
						if(element.data.length > MAX_PTS){
							element.data.shift();
						}
						break;
					}
				}
			}
			if (!found) {
				chart.data.datasets.push({
					"label":lb,
					"data":[{x: moment(time), y:Number(dat)}],
					"fill":false,
					"borderColor":COLORS[chart.data.datasets.length%COLORS.length],
					"lineTension":0.1
				});
			}
		}

		// draw a individual chrat based on id
		// only update if timestamp is newer
		// title = device id
		// time = full time stamp
		// msg = data to plot
		function drawChart(msg, title, time){
			var chart = charts[title];
			console.log(moment(time)+" "+title);
			Object.keys(msg).forEach(element => {
				insertData(chart, element, JSON.parse(msg[element]), moment(time));
			});
			// chart.update({
			// 		duration: 800,
			// 		easing: 'easeOutBounce'
			// });
			chart.update();
		}

		// draw connection state badge
		function drawState(data, element) {
			// connstatus badge color and text
			if(data["state"] == "Disconnected"){
					$("#"+element+"label").removeClass("badge badge-success");
					$("#"+element+"label").addClass("badge badge-danger");
					$("#"+element+"label").text("Disconnected at "+
						data["lastActive"].split(".")[0].replace("T", " "));
				} else {
					$("#"+element+"label").removeClass("badge badge-danger");
					$("#"+element+"label").addClass("badge badge-success");
					$("#"+element+"label").text(data["state"]);
				}
		}

		// draw twin info block
		function drawTwin(twin, id){
			var str ='';
			Object.keys(twin).forEach(element =>{
				// console.log(element)
				str += "<p style=\"margin-top:-15px;\">"+element+": "+unwrapData(twin[element], 1);
			});
			$("#"+id).html(str);
			try {
				if (twin["properties"]["reported"]["Name"]) {
					$("#"+id+"name").text(twin["properties"]["reported"]["Name"]);
				} else {
					$("#"+id+"name").text(id);
				}
			} catch(err) {
				console.log(err)
			}
		}

		// initialization
		items(devices);
		Object.keys(twins).forEach(id =>{
			drawTwin(twins[id], id)
		});
		$('.carousel').carousel();

		// listen to web socket
		var socket = io();
		Object.keys(devices).forEach(id =>{
			socket.on(id+"/device", function(data){
				console.log("receive device");
				drawState(data, id)
			});
		
			socket.on(id+"/twin", function(data){
				console.log("receive twin");
				drawTwin(data, id);
			});

			socket.on(id+"/telemtry", function(data){
				console.log("receive telemtry");
				drawChart(data["body"], id, data["time"]);
			});
		});
	</script>
</body>
</html>
